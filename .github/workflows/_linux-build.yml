name: linux-build

on:
  workflow_call:
    inputs:
      docker-image-name:
        required: true
        type: string
        description: Name of the base docker image to build with.
      force-docker-tag:
        required: false
        type: string
        default: ""
        description: |
          If set, force the CI to use this docker tag instead of calculating it
          based on the state of the repo.
      upload-artifacts:
        required: false
        type: boolean
        default: true
        description: Whether to upload the build artifacts
      artifact-suffix:
        required: false
        type: string
        default: ""
        description: |
          TODO
      build-with-debug:
        required: false
        type: boolean
        default: false
        description: If set, build in debug mode.
      env-variables:
        required: false
        type: string
        default: ""
        description: |
          Supplementary list of environment variables to set (will get passed to docker as well).
          If this is set, an `artifact-suffix` input is required, to avoid
          colliding with other build artifacts that use the same docker image.
      script:
        required: false
        type: string
        default: .jenkins/pytorch/build.sh
        description: |
          Build script to use. Will be run inside docker.
          If this is set, an `artifact-suffix` input is required, to avoid
          colliding with other build artifacts that use the same docker image.

    outputs:
      docker-image:
        value: ${{ jobs.build.outputs.docker-image }}
        description: The docker image containing the built PyTorch.

jobs:
  build:
    # Don't run on forked repos.
    if: github.repository_owner == 'pytorch'
    runs-on: [self-hosted, linux.2xlarge]
    timeout-minutes: 240
    outputs:
      docker-image: ${{ steps.calculate-docker-image.outputs.docker-image }}
    steps:
      # [pytorch repo ref]
      # Use a pytorch/pytorch reference instead of a reference to the local
      # checkout because when we run this action we don't *have* a local
      # checkout. In other cases you should prefer a local checkout.
      - name: Checkout PyTorch
        uses: pytorch/pytorch/.github/actions/checkout-pytorch@master

      - name: Validate workflow inputs
        env:
          WORKFLOW_INPUTS: toJSON(inputs)
        run: echo "${WORKFLOW_INPUTS}" | python .github/scripts/validate_workflow_inputs.py

      - name: Setup Linux
        uses: ./.github/actions/setup-linux

      - name: Add additional environment variables
        env:
          ENV_VARS: ${{ inputs.env-variables }}
        run: |
          if [[ -n "${ENV_VARS}" ]]; then
            echo "${ENV_VARS}" >> "${GITHUB_ENV}"
            echo "${ENV_VARS}" >> "/tmp/docker_env_${GITHUB_RUN_ID}"
          fi
          env | grep '^GITHUB' >> "/tmp/docker_env_${GITHUB_RUN_ID}"
          env | grep '^CI' >> "/tmp/docker_env_${GITHUB_RUN_ID}"

      - name: Setup SSH (Click me for login details)
        uses: ./.github/actions/setup-ssh
        with:
          github-secret: ${{ secrets.GITHUB_TOKEN }}

      - name: Calculate docker image
        id: calculate-docker-image
        uses: ./.github/actions/calculate-docker-image
        with:
          docker-image-name: ${{ inputs.docker-image-name }}
          force-docker-tag: ${{ inputs.force-docker-tag }}

      - name: Pull docker image
        uses: ./.github/actions/pull-docker-image
        with:
          docker-image: ${{ steps.calculate-docker-image.outputs.docker-image }}

      - name: Parse ref
        id: parse-ref
        run: .github/scripts/parse_ref.py

      - name: Get workflow job id
        id: get-job-id
        uses: ./.github/actions/get-workflow-job-id
        if: always()
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build
        env:
          BRANCH: ${{ steps.parse-ref.outputs.branch }}
          # TODO duplicated
          AWS_DEFAULT_REGION: us-east-1
          PR_NUMBER: ${{ github.event.pull_request.number }}
          SHA1: ${{ github.event.pull_request.head.sha || github.sha }}
          SCCACHE_BUCKET: ossci-compiler-cache-circleci-v2
          XLA_CLANG_CACHE_S3_BUCKET_NAME: ossci-compiler-clang-cache-circleci-xla
          PR_LABELS: ${{ toJson(github.event.pull_request.labels.*.name) }}
          TORCH_CUDA_ARCH_LIST: 5.2
          DOCKER_IMAGE: ${{ steps.calculate-docker-image.outputs.docker-image }}
          XLA_CUDA: 0
          DEBUG: ${{ inputs.build-with-debug && '1' || '0' }}
          OUR_GITHUB_JOB_ID: ${{ steps.get-job-id.outputs.job-id }}
          BUILD_SCRIPT: ${{ inputs.script }}
        run: |
          # detached container should get cleaned up by teardown_ec2_linux
          container_name=$(docker run \
            -e MAX_JOBS="$(nproc --ignore=2)" \
            -e AWS_DEFAULT_REGION \
            -e PR_NUMBER \
            -e SHA1 \
            -e BRANCH \
            -e SCCACHE_BUCKET \
            -e XLA_CUDA \
            -e XLA_CLANG_CACHE_S3_BUCKET_NAME \
            -e SKIP_SCCACHE_INITIALIZATION=1 \
            -e TORCH_CUDA_ARCH_LIST \
            -e PR_LABELS \
            -e OUR_GITHUB_JOB_ID \
            --env-file="/tmp/docker_env_${GITHUB_RUN_ID}" \
            --security-opt seccomp=unconfined \
            --cap-add=SYS_PTRACE \
            --tty \
            --detach \
            --user jenkins \
            -v "${GITHUB_WORKSPACE}:/var/lib/jenkins/workspace" \
            -w /var/lib/jenkins/workspace \
            "${DOCKER_IMAGE}"
          )
          docker exec -t "${container_name}" sh -c "${BUILD_SCRIPT}"

      - name: Archive artifacts into zip
        if: inputs.upload-artifacts
        run: |
          zip -1 -r artifacts.zip dist/ build/custom_test_artifacts build/lib build/bin .pytorch-test-times.json

      - name: Store PyTorch Build Artifacts on S3
        uses: seemethere/upload-artifact-s3@v5
        if: inputs.upload-artifacts
        with:
          name: ${{ inputs.docker-image-name }}-${{ inputs.artifact-suffix }}
          retention-days: 14
          if-no-files-found: error
          path: artifacts.zip

      - name: Upload sccache stats
        uses: seemethere/upload-artifact-s3@v5
        with:
          s3-prefix: |
            ${{ github.repository }}/${{ github.run_id }}/${{ github.run_attempt }}/artifact
          retention-days: 365
          if-no-files-found: warn
          path: sccache-stats-*.json

      - name: Teardown Linux
        uses: ./.github/actions/teardown-linux
        if: always()
